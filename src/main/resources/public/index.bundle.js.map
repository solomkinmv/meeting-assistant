{"version":3,"file":"index.bundle.js","mappings":"o2CAGA,aAGI,WAAYA,GACRC,KAAKD,WAAaA,EAuB1B,OApBU,YAAAE,cAAN,W,gGACoB,SAAMD,KAAKD,WAAWG,KAAK,iBAAkB,O,OAE7D,OAFMC,EAAU,SAChBC,QAAQC,IAAI,2CAA4CF,GACjD,CAAP,EAAOA,EAAY,YAGjB,YAAAG,aAAN,SAAmBC,EAAmBC,EAAkBC,G,gGAEpC,OADhBL,QAAQM,MAAM,oBAAqBH,EAAWC,EAAUC,GACxC,GAAMT,KAAKD,WAAWY,IAAI,wBAAiBJ,EAAS,sBAAcC,GAC9E,CAACC,UAAWA,K,OAEhB,OAHMN,EAAU,SAEhBC,QAAQC,IAAI,2CAA4CF,GACjD,CAAP,EAAOA,WAGL,YAAAS,WAAN,SAAiBL,G,gGAEG,OADhBH,QAAQM,MAAM,kBAAmBH,GACjB,GAAMP,KAAKD,WAAWc,IAAI,wBAAiBN,K,OAE3D,OAFMJ,EAAU,SAChBC,QAAQC,IAAI,yCAA0CF,GAC/C,CAAP,EAAOA,WAEf,EA3BA,GA6BA,2BAqCA,OAnCU,YAAAU,IAAN,SAAUC,G,gGACW,SAAMC,MAAMD,EAAK,CAC9BE,OAAQ,S,OAEC,SAHI,SAGWC,Q,OAE5B,OAFMC,EAAO,SACbd,QAAQC,IAAI,2BAA4Ba,GACjC,CAAP,EAAOA,WAGL,YAAAhB,KAAN,SAAWY,EAAaK,G,gGACH,SAAMJ,MAAMD,EAAK,CAC9BE,OAAQ,OACRI,QAAS,CACL,eAAgB,oBAEpBD,KAAME,KAAKC,UAAUH,M,OAEZ,SAPI,SAOWF,Q,OAE5B,OAFMC,EAAO,SACbd,QAAQC,IAAI,4BAA6Ba,GAClC,CAAP,EAAOA,WAGL,YAAAP,IAAN,SAAUG,EAAaK,G,gGACF,SAAMJ,MAAMD,EAAK,CAC9BE,OAAQ,MACRI,QAAS,CACL,eAAgB,oBAEpBD,KAAME,KAAKC,UAAUH,M,OAEZ,SAPI,SAOWF,Q,OAE5B,OAFMC,EAAO,SACbd,QAAQC,IAAI,2BAA4Ba,GACjC,CAAP,EAAOA,WAGf,EArCA,GChCA,2BAcA,OAZI,YAAAK,aAAA,WACIC,OAAOC,SAASC,KAAO,QAG3B,YAAAC,aAAA,WACIH,OAAOC,SAASC,KAAO,KAG3B,YAAAE,gBAAA,SAAgBrB,GACZiB,OAAOC,SAASC,KAAO,mBAAYnB,IAG3C,EAdA,GCkCA,IA9BA,WAKI,WAAYsB,EAA8BC,GACtC9B,KAAK6B,cAAgBA,EACrB7B,KAAK8B,UAAYA,EACjB1B,QAAQM,MAAM,0BAA2BmB,EAAeC,GAoBhE,OAjBW,YAAAC,OAAP,WACI3B,QAAQM,MAAM,2BACdV,KAAKgC,iBAAmBC,SAASC,eAAe,sBAEhDlC,KAAKgC,iBAAiBG,QAAUnC,KAAKoC,wBAAwBC,KAAKrC,OAGxD,YAAAoC,wBAAd,W,ioCACIhC,QAAQM,MAAM,8B,iBAEQ,O,sBAAA,GAAMV,KAAK6B,cAAc5B,iB,cAArCM,EAAY,SAClBP,KAAK8B,UAAUF,gBAAgBrB,G,+BAE/BH,QAAQkC,MAAM,2BAA4B,G,4TAItD,EA5BA,GA8BA,CAAuB,IAAIC,EAAc,IAAIC,GACzC,IAAIC,GACHV,U","sources":["webpack://client/./src/scripts/meeting-client.ts","webpack://client/./src/scripts/app-navigator.ts","webpack://client/./src/scripts/index.ts"],"sourcesContent":["import {Interval} from \"./model/interval\";\nimport {Meeting} from \"./model/meeting\";\n\nexport class MeetingClient {\n    restClient: RestClient;\n\n    constructor(restClient: RestClient) {\n        this.restClient = restClient;\n    }\n\n    async createMeeting(): Promise<string> {\n        const meeting = await this.restClient.post(`/api/meetings/`, null);\n        console.log('Received response after meeting creation', meeting);\n        return meeting['id'];\n    }\n\n    async setIntervals(meetingId: string, username: string, intervals: Interval[]): Promise<Meeting> {\n        console.debug('Setting intervals', meetingId, username, intervals);\n        const meeting = await this.restClient.put(`/api/meetings/${meetingId}/intervals/${username}`,\n            {intervals: intervals});\n        console.log('Received response on update of intervals', meeting);\n        return meeting;\n    }\n\n    async getMeeting(meetingId: string): Promise<Meeting> {\n        console.debug('Getting meeting', meetingId);\n        const meeting = await this.restClient.get(`/api/meetings/${meetingId}`);\n        console.log('Received response on meeting retrieval', meeting);\n        return meeting;\n    }\n}\n\nexport class RestClient {\n\n    async get(url: string) {\n        const response = await fetch(url, {\n            method: 'GET',\n        });\n        const data = await response.json();\n        console.log('Received response on get', data);\n        return data;\n    }\n\n    async post(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n        const data = await response.json();\n        console.log('Received response on post', data);\n        return data;\n    }\n\n    async put(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n        const data = await response.json();\n        console.log('Received response on put', data);\n        return data;\n    }\n\n}\n","export class AppNavigator {\n\n    openNotFound() {\n        window.location.href = `/404`;\n    }\n\n    openMainPage() {\n        window.location.href = `/`;\n    }\n\n    openMeetingPage(meetingId: string) {\n        window.location.href = `/meeting/${meetingId}`;\n    }\n\n}\n","import {Controller} from \"./controller/controller\";\nimport {MeetingClient, RestClient} from \"./meeting-client\";\nimport {AppNavigator} from \"./app-navigator\";\n\nclass MainPageController implements Controller {\n    meetingClient: MeetingClient\n    navigator: AppNavigator\n    newMeetingButton: HTMLElement\n\n    constructor(meetingClient: MeetingClient, navigator: AppNavigator) {\n        this.meetingClient = meetingClient\n        this.navigator = navigator\n        console.debug(\"Created main controller\", meetingClient, navigator)\n    }\n\n    public onLoad() {\n        console.debug(\"Loading main controller\")\n        this.newMeetingButton = document.getElementById(\"new-meeting-button\");\n\n        this.newMeetingButton.onclick = this.onNewMeetingButtonClick.bind(this);\n    }\n\n    private async onNewMeetingButtonClick() {\n        console.debug(\"Clicked new meeting button\")\n        try {\n            const meetingId = await this.meetingClient.createMeeting();\n            this.navigator.openMeetingPage(meetingId);\n        } catch (e) {\n            console.error(\"Failed to create meeting\", e);\n        }\n    }\n\n}\n\nnew MainPageController(new MeetingClient(new RestClient()),\n    new AppNavigator())\n    .onLoad();\n"],"names":["restClient","this","createMeeting","post","meeting","console","log","setIntervals","meetingId","username","intervals","debug","put","getMeeting","get","url","fetch","method","json","data","body","headers","JSON","stringify","openNotFound","window","location","href","openMainPage","openMeetingPage","meetingClient","navigator","onLoad","newMeetingButton","document","getElementById","onclick","onNewMeetingButtonClick","bind","error","MeetingClient","RestClient","AppNavigator"],"sourceRoot":""}