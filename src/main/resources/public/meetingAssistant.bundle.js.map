{"version":3,"file":"meetingAssistant.bundle.js","mappings":"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","sources":["webpack://client/./src/scripts/meeting-client.ts","webpack://client/./src/scripts/model/interval.ts","webpack://client/./src/scripts/app-navigator.ts","webpack://client/./src/scripts/meeting-assistant.ts"],"sourcesContent":["import {Interval} from \"./model/interval\";\nimport {Meeting} from \"./model/meeting\";\n\nexport class MeetingClient {\n    restClient: RestClient;\n\n    constructor(restClient: RestClient) {\n        this.restClient = restClient;\n    }\n\n    async createMeeting(): Promise<string> {\n        const meeting = await this.restClient.post(`/api/meetings/`, null);\n        console.log('Received response after meeting creation', meeting);\n        return meeting['id'];\n    }\n\n    async setIntervals(meetingId: string, username: string, intervals: Interval[]): Promise<Meeting> {\n        console.debug('Setting intervals', meetingId, username, intervals);\n        const meeting = await this.restClient.put(`/api/meetings/${meetingId}/intervals/${username}`,\n            {intervals: intervals});\n        console.log('Received response on update of intervals', meeting);\n        return meeting;\n    }\n\n    async getMeeting(meetingId: string): Promise<Meeting> {\n        console.debug('Getting meeting', meetingId);\n        const meeting = await this.restClient.get(`/api/meetings/${meetingId}`);\n        console.log('Received response on meeting retrieval', meeting);\n        return meeting;\n    }\n}\n\nexport class RestClient {\n\n    async get(url: string) {\n        const response = await fetch(url, {\n            method: 'GET',\n        });\n        const data = await response.json();\n        console.log('Received response on get', data);\n        return data;\n    }\n\n    async post(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n        const data = await response.json();\n        console.log('Received response on post', data);\n        return data;\n    }\n\n    async put(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n        const data = await response.json();\n        console.log('Received response on put', data);\n        return data;\n    }\n\n}\n","export class Interval {\n    from: number;\n    to: number;\n\n    constructor(from: number, to: number) {\n        this.from = from;\n        this.to = to;\n    }\n}\n","export class AppNavigator {\n\n    openNotFound() {\n        window.location.href = `/404`;\n    }\n\n    openMainPage() {\n        window.location.href = `/`;\n    }\n\n    openMeetingPage(meetingId: string) {\n        window.location.href = `/meeting/${meetingId}`;\n    }\n\n}\n","import {MeetingClient, RestClient} from \"./meeting-client\";\nimport {Interval} from \"./model/interval\";\nimport {Meeting} from \"./model/meeting\";\nimport {Controller} from \"./controller/controller\";\nimport {AppNavigator} from \"./app-navigator\";\n\nclass PageState {\n    meetingId: string;\n    userIntervals: Record<string, Interval[]>;\n    intersections: Array<Interval>;\n\n    getUsername(): string {\n        return sessionStorage.getItem(\"username\");\n    }\n\n    setUsername(username: string) {\n        sessionStorage.setItem(\"username\", username);\n    }\n\n    setMeeting(meeting: Meeting) {\n        console.log(\"Setting meeting: \", meeting);\n        this.meetingId = meeting.id;\n        this.userIntervals = meeting.userIntervals;\n        this.intersections = meeting.intersections;\n    }\n\n    addInterval(newInterval: Interval) {\n        const intervals = this.userIntervals[this.getUsername()] || [];\n        intervals.push(newInterval);\n        intervals.sort((a, b) => a.from - b.from);\n\n        const updatedIntervals = [];\n        updatedIntervals.push(intervals[0]);\n\n        for (let i = 1; i < intervals.length; i++) {\n            if (intervals[i].from <= updatedIntervals[updatedIntervals.length - 1].to) {\n                updatedIntervals[updatedIntervals.length - 1].to = Math.max(updatedIntervals[updatedIntervals.length - 1].to, intervals[i].to);\n            } else {\n                updatedIntervals.push(intervals[i]);\n            }\n        }\n\n        this.userIntervals[this.getUsername()] = updatedIntervals;\n\n        console.log(\"Updated page state after inserting interval\", newInterval, this);\n        return updatedIntervals;\n    }\n\n}\n\nclass MeetingPageController implements Controller {\n    pageState: PageState;\n    meetingClient: MeetingClient;\n    navigator: AppNavigator;\n    inputIntervalFrom: HTMLInputElement;\n    inputIntervalTo: HTMLInputElement;\n    inputUsername: HTMLInputElement;\n    intervalsBlock: HTMLElement;\n    button: HTMLElement;\n\n    constructor(pageState: PageState, meetingClient: MeetingClient, navigator: AppNavigator) {\n        this.pageState = pageState;\n        this.meetingClient = meetingClient;\n        this.navigator = navigator;\n    }\n\n    onLoad() {\n        console.debug(\"Loading meeting controller\")\n        this.inputIntervalFrom = document.getElementById('intervalFrom') as HTMLInputElement;\n        this.inputIntervalTo = document.getElementById('intervalTo') as HTMLInputElement;\n        this.inputUsername = document.getElementById('name') as HTMLInputElement;\n        this.button = document.getElementById('addInterval');\n        this.intervalsBlock = document.getElementById('intervals')\n\n        this.button.onclick = this.addInterval.bind(this);\n        this.inputUsername.onchange = this.updateUsername.bind(this);\n\n        let path = window.location.pathname.split('/');\n        let meetingId = path[path.length - 1];\n        if (meetingId) {\n            console.log(\"Page with meeting id: \", meetingId);\n            this.meetingClient.getMeeting(meetingId)\n                .then(meeting => this.pageState.setMeeting(meeting))\n                .then(() => this.renderIntervals())\n                .catch(error => {\n                    console.log(`Failed to get meeting ${meetingId}: `, error);\n                    this.navigator.openNotFound();\n                });\n        } else {\n            throw new Error('No meeting id found');\n        }\n\n        this.setName(this.pageState.getUsername() || this.promptName());\n    }\n\n    updateUsername() {\n        this.pageState.setUsername(this.inputUsername.value);\n    }\n\n    promptName() {\n        return prompt(\"Enter your name\");\n    }\n\n    setName(username: string) {\n        this.pageState.setUsername(username);\n        this.inputUsername.value = username;\n        console.log(\"Username: \", username);\n    }\n\n    addInterval() {\n        const newInterval = new Interval(this.parseDate(this.inputIntervalFrom.value), this.parseDate(this.inputIntervalTo.value));\n        if (newInterval.from >= newInterval.to) {\n            alert(\"Invalid interval\");\n            return;\n        }\n        const intervals = this.pageState.addInterval(newInterval);\n        this.meetingClient.setIntervals(this.pageState.meetingId, this.pageState.getUsername(), intervals)\n            .then(meeting => this.pageState.setMeeting(meeting))\n            .then(() => this.renderIntervals())\n            .catch(error => console.log(\"Failed to update intervals for user: \", error));\n    }\n\n    parseDate(dateString: string): number {\n        return new Date(dateString).getTime();\n    }\n\n    renderIntervals() {\n        this.intervalsBlock.innerHTML = '';\n\n        const intervalsHeaderElement = document.createElement('h2');\n        intervalsHeaderElement.innerText = 'Intervals:';\n        this.intervalsBlock.appendChild(intervalsHeaderElement);\n\n        for (const [username, perUserIntervals] of Object.entries(this.pageState.userIntervals)) {\n            const usernameElement = document.createElement('h3');\n            usernameElement.innerText = username;\n            this.intervalsBlock.appendChild(usernameElement);\n\n            for (const interval of perUserIntervals) {\n                const intervalElement = document.createElement('div');\n                intervalElement.innerText = new Date(interval.from).toLocaleString() + ' - ' + new Date(interval.to).toLocaleString();\n                this.intervalsBlock.appendChild(intervalElement);\n            }\n        }\n\n        const intersectionsHeaderElement = document.createElement('h2');\n        intersectionsHeaderElement.innerText = 'Intersections:';\n        this.intervalsBlock.appendChild(intersectionsHeaderElement);\n        for (const interval of this.pageState.intersections) {\n            const intervalElement = document.createElement('div');\n            intervalElement.innerText = new Date(interval.from).toLocaleString() + ' - ' + new Date(interval.to).toLocaleString();\n            this.intervalsBlock.appendChild(intervalElement);\n        }\n    }\n}\n\nnew MeetingPageController(new PageState(), new MeetingClient(new RestClient()), new AppNavigator())\n    .onLoad();\n"],"names":["restClient","this","createMeeting","post","meeting","console","log","setIntervals","meetingId","username","intervals","debug","put","getMeeting","get","url","fetch","method","json","data","body","headers","JSON","stringify","from","to","openNotFound","window","location","href","openMainPage","openMeetingPage","getUsername","sessionStorage","getItem","setUsername","setItem","setMeeting","id","userIntervals","intersections","addInterval","newInterval","push","sort","a","b","updatedIntervals","i","length","Math","max","pageState","meetingClient","navigator","onLoad","inputIntervalFrom","document","getElementById","inputIntervalTo","inputUsername","button","intervalsBlock","onclick","bind","onchange","updateUsername","path","pathname","split","Error","then","renderIntervals","catch","error","setName","promptName","value","prompt","Interval","parseDate","alert","dateString","Date","getTime","innerHTML","intervalsHeaderElement","createElement","innerText","appendChild","Object","entries","perUserIntervals","usernameElement","interval","intervalElement","toLocaleString","intersectionsHeaderElement","PageState","MeetingClient","RestClient","AppNavigator"],"sourceRoot":""}